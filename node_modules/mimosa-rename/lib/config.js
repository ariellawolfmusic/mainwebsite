"use strict";
exports.defaults = function() {
  return {
    rename: {
      map: []
    }
  };
};

exports.placeholder = function() {
  return "\t\n  rename:     # Allows for renaming of output files before they are written.\n    map: []   # An array of mapping arrays. Each mapping array contains two elements:\n              # a regex to match a file name, and the regex replace string/function.\n              # The regex is matched against the output name of the file relative to\n              # the root of the project.\n              # Example\n              # map: [  [/public([\/\\])foo.js/, \"public$1bar.js\"] ]";
};

exports.validate = function(config, validators) {
  var errors;
  errors = [];
  if (validators.ifExistsIsObject(errors, "rename config", config.rename)) {
    if (validators.ifExistsIsArray(errors, "rename.map", config.rename.map)) {
      config.rename.map.forEach(function(_arg, i) {
        var regex, replace;
        regex = _arg[0], replace = _arg[1];
        return validators.isRegex(errors, "rename.map[" + i + "][0]", regex);
      });
    }
  }
  return errors;
};
