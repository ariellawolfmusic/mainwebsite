"use strict";
var logger, _rename;

logger = null;

exports.registration = function(config, register) {
  logger = config.log;
  register(['add', 'update', 'buildFile', 'buildExtension'], 'beforeWrite', _rename);
  return register(['remove', 'cleanFile'], 'beforeDelete', _rename);
};

_rename = function(config, options, next) {
  var hasFiles, i, inner, _ref, _ref1;
  if ((options != null ? options.destinationFile : void 0) && (config != null ? (_ref = config.rename) != null ? _ref.map : void 0 : void 0)) {
    inner = options.destinationFile;
    options.destinationFile = function(name) {
      name = inner(name);
      config.rename.map.forEach(function(_arg) {
        var newName, regex, replace;
        regex = _arg[0], replace = _arg[1];
        if (regex.test(name)) {
          newName = name.replace(regex, replace);
          logger.debug("Renaming [[ " + name + " ]] to [[ " + newName + " ]].");
          return name = newName;
        }
      });
      return name;
    };
  }
  hasFiles = ((_ref1 = options.files) != null ? _ref1.length : void 0) > 0;
  if (!hasFiles) {
    return next();
  }
  i = 0;
  options.files.forEach(function(file) {
    if (file.outputFileName) {
      return config.rename.map.forEach(function(_arg) {
        var newName, regex, replace;
        regex = _arg[0], replace = _arg[1];
        if (regex.test(file.outputFileName)) {
          newName = file.outputFileName.replace(regex, replace);
          logger.debug("Renaming [[ " + file.outputFileName + " ]] to [[ " + newName + " ]].");
          file.outputFileName = newName;
          return null;
        }
      });
    }
  });
  return next();
};
